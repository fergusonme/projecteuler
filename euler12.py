#!/usr/bin/env python
#
# The sequence of triangle numbers is generated by adding the natural numbers. 
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first 
# ten terms would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Let us list the factors of the first seven triangle numbers:
#
#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
#
# We can see that 28 is the first triangle number to have over five divisors.
#
# What is the value of the first triangle number to have over five hundred divisors?

max_divisors, max_nums = 500, 100000

triangle_numbers = [a*(a+1)/2 for a in range(1,max_nums)]

def count_factors(N):
  candidate = 1
  result = 0
  while candidate * candidate < N:
    # N has two factors: candidate and N // candidate
    if N % candidate == 0:      
      result += 2    
    candidate += 1
    # If N is square of some value.
    if candidate * candidate == N:  
      result += 1
  return result
  
for i in triangle_numbers:
  if count_factors(i) > max_divisors:
    print "Answer: ", i
    break
  print i